AWSTemplateFormatVersion: '2010-09-09'
Description: Base stack to create EKS cluster and nodes

Parameters:

  # this is referenced throughout this template
  CFNS3LOCATION:
    Description: Bucket name to get all config files
    Type: String
    Default: anz-container-day-configfiles


Resources:  
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub CodeBuild-${AWS::StackName}
      Description: A description about my project
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          Status:  ENABLED
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
        EnvironmentVariables:
          - Name: CFN_RESPONSE_URL
            Value: !Ref WaitForStackCreationHandle
          - Name: STACK_NAME_EKS_LAB
            Value: EKS-Lab-Stack
          - Name: EKS_CLUSTER_NAME
            Value: EKS-Lab
          - Name: CFNS3LOCATION
            Value: !Ref CFNS3LOCATION
      Source:
        Type: S3
        Location: !Sub ${CFNS3LOCATION}/archive.zip
      TimeoutInMinutes: 60

  WaitForStackCreationHandle: 
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition: 
    Type: AWS::CloudFormation::WaitCondition
    # dont start till we create a lambda function
    DependsOn: [CustomTriggerBuild]
    Properties: 
      Handle: !Ref WaitForStackCreationHandle
      # wait for 55 minutes before giving up
      Timeout: 3300
      # success or failure signal count 
      Count: 1

  CustomTriggerBuild: 
    Type: Custom::ManageCloud9IDEIamRole
    DependsOn: BuildProject
    Properties: 
      ServiceToken: !GetAtt TriggerBuildLambda.Arn
      CodebuildProjectName: !Ref BuildProject


  TriggerBuildLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: !Sub IAMPolicy-${AWS::StackName}
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                    - codebuild:*
                Resource: !GetAtt BuildProject.Arn

  TriggerBuildLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: function to retrive User info
      Handler: index.handler
      Role: !GetAtt TriggerBuildLambdaIamRole.Arn
      Runtime: python3.7
      Code:
        ZipFile: |
          import boto3
          import logging
          import cfnresponse
          import sys
          import json

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
          def handler(event, context):
              logger.info('Incoming Event: {0}'.format(event))
              response = {}

              if event['RequestType'] == 'Delete':
                  # return 
                  logger.info('Nothing to do. Request Type : {0}'.format(event['RequestType']))
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response , 'asdklj23l4kjsldmnasdlkhqw424')

              elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':

                try:
                  codebuild_client = boto3.client('codebuild')
                  codebuild_client.start_build(projectName=event['ResourceProperties']['CodebuildProjectName'])
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response , 'asdklj23l4kjsldmnasdlkhqw424')

                except:
                  logging.error('Error: {0}'.format(sys.exc_info() ))
                  cfnresponse.send(event, context, cfnresponse.FAILED, response , 'asdklj23l4kjsldmnasdlkhqw424')
              return 'Done'